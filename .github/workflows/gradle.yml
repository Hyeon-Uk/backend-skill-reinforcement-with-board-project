# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI/CD with Gradle

on:
  push:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

    # Gradle 캐싱
    - name: Gradle Caching
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant execution permission to gradlew
      run: sudo chmod 755 gradlew

    - name: Build with Gradle Wrapper
      run: ./gradlew build

    - name: Docker hub login
      if: success()
      run: docker login -u ${{secrets.DOCKER_ID}} -p ${{secrets.DOCKER_PASSWORD}}

    - name: Docker image build
      if: success()
      run: |
        docker build -t ${{secrets.DOCKER_USERNAME}}/test .
        docker push ${{secrets.DOCKER_USERNAME}}/test

    - name: Deploy to instance
      if: success()
      uses: appleboy/ssh-action@master
      with:
        host: ${{secrets.EC2_HOST}}
        username: ${{secrets.EC2_USERNAME}}
        key: ${{secrets.EC2_PRIVATE_KEY}}

        script: |
          sudo docker kill test
          sudo docker rm -f test
          sudo docker rmi ${{secrets.DOCKER_USERNAME}}/test
          sudo docker pull ${{secrets.DOCKER_USERNAME}}/test
          
          sudo docker run -d -p 8080:8080 \
          --name test ${{secrets.DOCKER_USERNAME}}/test